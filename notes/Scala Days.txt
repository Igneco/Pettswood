
Executable documentation - the remix

I think that getting good software specifications is a solved problem, and has been for years. Executable documents let you pin down requirements with no wriggle-room, yet give users the power to write and understand their own specs, which become your tests.

It's a shame executable documents are so hard for laypeople to author, for developers to support with fixture classes, and for anyone to refactor. It is time to make it easy, for the business and for us. We developers have been using Fit and its progeny for a decade now, so we know anti-patterns to avoid, there are new authoring tools available, and our favourite automations should be built-in to our new toolset.

Pettswood consists of an HTML-parsing kernel and a library of optional support tools. Its goal is to make executable documents a true drop-in solution for any project.

I want to show you what it can do, and I want to encourage you to use it, and perhaps even contribute to it.

You might like Pettswood because:
 - A cornerstone of executable documentation is customer involvement, so peripherals for Pettswood enable WYSIWYG editing of specs.
 - Test fixture is short and simple (and no type adapters are required)
 - It integrates with SBT, as part of your test suite.
 - It incorporates by default things that had to be added to Fit-based tests: nested tables, mixins and flow.
 - Simple tweaks and tips gathered from years of working with executable documentation are included in the examples.

Why Scala?
 - Built-in XML processing
 - Inline functions
 - Pattern matching
 - Case classes
 - Mixins

Come along to hear more about executable documentation, and why it is easier to support it with Scala. More importantly, come along and tell me what you want to see next.










